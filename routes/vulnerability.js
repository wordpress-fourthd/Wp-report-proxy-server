// routes/vulnerability.js
const express = require('express');
const axios = require('axios');
const authenticate = require('../middleware/auth');

const router = express.Router();
const axiosInstance = axios.create({
  timeout: 10000,
  baseURL: 'https://api.wpvulnerability.com',
  headers: { 'User-Agent': 'FD-Maintenance/1.0' }
});

router.post('/', authenticate, async (req, res) => {
  const { core_version, plugins = [], themes = [] } = req.body;

  if (!core_version) {
    return res.status(400).json({ error: 'Missing core_version' });
  }

  const results = {
    site_url: req.site_url,
    core: null,
    plugins: [],
    themes: []
  };

  try {
    // Core check
    try {
      const response = await axiosInstance.get(`/core/${core_version}`);
      results.core = response.data;
    } catch (err) {
      results.core = { error: 'Core check failed' };
    }

    // Plugin checks
    results.plugins = await Promise.all(
      plugins.map(async ({ slug }) => {
        if (!slug) return { slug, error: 'Missing slug' };
        try {
          const res = await axiosInstance.get(`/plugin/${slug}`);
          return { slug, vulnerabilities: res.data };
        } catch {
          return { slug, error: 'Plugin check failed' };
        }
      })
    );

    // Theme checks
    results.themes = await Promise.all(
      themes.map(async ({ slug }) => {
        if (!slug) return { slug, error: 'Missing slug' };
        try {
          const res = await axiosInstance.get(`/theme/${slug}`);
          return { slug, vulnerabilities: res.data };
        } catch {
          return { slug, error: 'Theme check failed' };
        }
      })
    );

    res.json(results);
  } catch (err) {
    console.error('❌ Server Error:', err.message);
    res.status(500).json({ error: 'Vulnerability scan failed' });
  }
});

module.exports = router;
