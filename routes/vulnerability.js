// vulnerability.js
const express = require('express');
const axios = require('axios');
const app = express();

// Use JSON middleware
app.use(express.json());

// Create an axios instance with timeout
const axiosInstance = axios.create({ timeout: 5000 });

// Main route
app.post('/vulnerabilities', async (req, res) => {
  const { core_version, plugins, themes } = req.body;

  // Validate core version
  if (!core_version || typeof core_version !== 'string') {
    return res.status(400).json({ error: 'core_version is required and must be a string.' });
  }

  const validatedPlugins = Array.isArray(plugins) ? plugins : [];
  const validatedThemes = Array.isArray(themes) ? themes : [];

  const results = {
    core: null,
    plugins: [],
    themes: []
  };

  try {
    // --- Check WordPress Core Vulnerabilities ---
    try {
      const coreRes = await axiosInstance.get(`https://www.wpvulnerability.com/api/core/${core_version}`);
      results.core = coreRes.data;
    } catch (err) {
      results.core = { error: 'Failed to fetch core vulnerabilities' };
    }

    // --- Check Plugin Vulnerabilities ---
    const pluginPromises = validatedPlugins.map(async (plugin) => {
      const slug = plugin.slug?.toLowerCase();
      const version = plugin.version;
      if (!slug || !version) return { slug, version, error: 'Invalid data' };

      const url = `https://www.wpvulnerability.com/api/plugins/${slug}/${version}`;
      try {
        const pluginRes = await axiosInstance.get(url);
        return {
          slug,
          version,
          vulnerabilities: pluginRes.data
        };
      } catch (err) {
        return {
          slug,
          version,
          error: 'Failed to fetch'
        };
      }
    });

    results.plugins = await Promise.all(pluginPromises);

    // --- Check Theme Vulnerabilities ---
    const themePromises = validatedThemes.map(async (theme) => {
      const slug = theme.slug?.toLowerCase();
      const version = theme.version;
      if (!slug || !version) return { slug, version, error: 'Invalid data' };

      const url = `https://www.wpvulnerability.com/api/themes/${slug}/${version}`;
      try {
        const themeRes = await axiosInstance.get(url);
        return {
          slug,
          version,
          vulnerabilities: themeRes.data
        };
      } catch (err) {
        return {
          slug,
          version,
          error: 'Failed to fetch'
        };
      }
    });

    results.themes = await Promise.all(themePromises);

    // Return final result
    res.json(results);

  } catch (err) {
    console.error('‚ùå Server error:', err.message);
    res.status(500).json({ error: 'Failed to complete full vulnerability scan.' });
  }
});

